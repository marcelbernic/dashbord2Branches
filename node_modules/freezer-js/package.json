{
  "name": "freezer-js",
  "version": "0.9.6",
  "description": "A tree data structure that is always updated from the root, making easier to think in a reactive way.",
  "main": "freezer.js",
  "homepage": "https://github.com/arqex/freezer",
  "scripts": {
    "test": "node ./node_modules/mocha/bin/mocha tests",
    "build": "node ./node_modules/gulp/bin/gulp.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/arqex/freezer.git"
  },
  "keywords": [
    "react",
    "reactive",
    "store",
    "flux",
    "state",
    "cursor",
    "tree",
    "immutable"
  ],
  "author": {
    "name": "arqex"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/arqex/freezer/issues"
  },
  "devDependencies": {
    "mocha": "~2.0.1",
    "unit.js": "~1.0.2",
    "gulp-uglify": "~1.0.1",
    "gulp-rename": "~1.2.0",
    "gulp-insert": "~0.4.0",
    "gulp": "~3.8.11",
    "benchmark": "~1.0.0",
    "immutable": "~3.6.2",
    "chai": "~2.0.0"
  },
  "readme": "# Freezer\r\n\r\nA tree data structure that is always updated from the root, even if the modification is triggered by one of the leaves, making it easier to think in a reactive way.\r\n\r\n[![Build Status](https://secure.travis-ci.org/arqex/freezer.svg)](https://travis-ci.org/arqex/freezer)\r\n[![npm version](https://badge.fury.io/js/freezer-js.svg)](http://badge.fury.io/js/freezer-js)\r\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/arqex/freezer?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\r\n\r\nAre you looking for an immutable.js alternative? Freezer is made with React.js in mind and uses real immutable structures. It is the perfect store for your Flux implementation. \r\n\r\nWhat makes Freezer special is:\r\n\r\n* Immutable trees to make fast comparison among nodes.\r\n* Eventful nodes to notify updates to other parts of the app.\r\n* No dependencies.\r\n* Lightweight: ~9KB minified (much less if gzipped).\r\n* Packaged as UMD module that can be loaded everywhere.\r\n* Uses common JS array and objects to store the data, so you can use it with your favourite libs like [lodash](https://lodash.com/), [underscore](http://underscorejs.org/) or [ramda](http://ramdajs.com/)\r\n\r\nDo you want to know more?\r\n\r\n* [Demos](#demos)\r\n* [Installation](#installation)\r\n* [Example](#example-of-use)\r\n* [Motivation](#why-another-store)\r\n* [Freezer API](#api)\r\n* [Updating the data](#update-methods)\r\n* [Events](#events-1)\r\n* [Batch updates](#batch-updates)\r\n* [Usage with React](#usage-with-react)\r\n* [Changelog](#changelog)\r\n* [Ask any question in the chat](https://gitter.im/arqex/freezer)\r\n\r\n\r\n## Demos\r\n* [You can **test** freezer.js in this JSbin](http://jsbin.com/fedeva/4/edit?js,console)\r\n* Todo MVC using Freezer. [Code](https://github.com/arqex/freezer-todomvc) & [Demo](http://freezer-todos.divshot.io).\r\n* [How to use React and Freezer together](https://medium.com/@arqex/react-the-simple-way-cabdf1f42f12).\r\n* [A JSON editor with undo and redo](http://jsbin.com/hugusi/1/edit?js,output), and [here the blog article](http://arqex.com/991/json-editor-react-immutable-data) explaining it .\r\n* [The flux comparison project](https://github.com/voronianski/flux-comparison).\r\n* [Freezer receiving data from websockets in the Flux Challenge.](https://github.com/staltz/flux-challenge/tree/master/submissions/arqex).\r\n* [Use freezer with redux-devtools](https://github.com/arqex/freezer-redux-devtools).\r\n\r\n\r\n## Installation\r\nFreezer is available as a npm package.\r\n```\r\nnpm install freezer-js\r\n```\r\n\r\nIt is possible to download the [full version](https://raw.githubusercontent.com/arqex/freezer/master/build/freezer.js) (~20KB) or [minified](https://raw.githubusercontent.com/arqex/freezer/master/build/freezer.min.js) (~9KB).\r\n\r\n\r\n## Example\r\nYou can play with [this example in JSBin](http://jsbin.com/hinazasuto/edit?js,console).\r\n```js\r\n// Browserify/Node style of loading\r\nvar Freezer = require('freezer-js');\r\n\r\n// Let's create a freezer object\r\nvar freezer = new Freezer({\r\n    a: {x: 1, y: 2, z: [0, 1, 2] },\r\n    b: [ 5, 6, 7 , { m: 1, n: 2 } ],\r\n    c: 'Hola',\r\n    d: null // It is possible to store whatever\r\n});\r\n\r\n// Let's get the frozen data stored\r\nvar state = freezer.get();\r\n\r\n// Listen to changes in the state\r\nfreezer.on('update', function( newValue ){\r\n    // New value will have the new state for your app\r\n    console.log( 'I was updated' );\r\n});\r\n\r\n// The data is read as usual\r\nconsole.log( state.c ); // logs 'Hola'\r\n\r\n// And used as usual\r\nstate.a.z.forEach( function( item ){\r\n    console.log( item );\r\n}); // logs 0, 1 and 2\r\n\r\n// But it is immutable, so...\r\nstate.d = 3; console.log( state.d ); // logs null\r\nstate.e = 4; console.log( state.e ); // logs undefined\r\n\r\n// to update, use methods like set that returns new frozen data\r\nvar updated = state.set( 'e', 4 ); // On next tick it will log 'I was updated'\r\n\r\nconsole.log( state.e ); // Still logs undefined\r\nconsole.log( updated.e ); // logs 4\r\n\r\n// freezer's data has changed!\r\nfreezer.get() !== state; // true\r\nfreezer.get() === updated; // true\r\n\r\n// The nodes that weren't updated are reused\r\nstate.a === updated.a; // true\r\nstate.b === updated.b; // true\r\n\r\n// Updates can be chained because the new immutable\r\n// data node is always returned\r\nvar updatedB = updated.b\r\n    .push( 50 )\r\n    .push( 100 )\r\n    .shift()\r\n    .set(0, 'Updated')\r\n; // It will log 'I was updated' on next tick, just once\r\n\r\n// updatedB is the current b property\r\nfreezer.get().b === updatedB; // true\r\n\r\n// And it is different from the one that started\r\nupdated !== freezer.get(); // true\r\nupdated.b !== updatedB; // true\r\nconsole.log( updated.b[0] ); // updated did't/can't change: logs 5\r\nconsole.log( updatedB[0] ); // logs 'Updated'\r\nconsole.log( updatedB[4] ); // logs 100\r\nupdatedB.length === 5; // true: We added 2 elements and removed 1\r\n\r\n// Untouched nodes are still the same\r\nstate.a === freezer.get().a; // still true\r\nupdated.a === freezer.get().a; // still true\r\n\r\n// Reverting to a previous state is as easy as\r\n// set the data again (Undo/redo made easy)\r\nfreezer.set( state ); // It will log 'I was updated' on next tick\r\n\r\nfreezer.get() === state; // true\r\n```\r\n\r\n\r\n## Why another state holder?\r\n\r\n**Freezer** is inspired by other tree cursor libraries, specifically [Cortex](https://github.com/mquan/cortex), that try to solve an inconvenience of the Flux architecture:\r\n\r\n* If you have a store with deep nested data and you need to update some value from a child component that reflects that data, you need to dispatch an action and from the top of the store look for the bit of data again to update it. That may involve a lot of extra code to propagate the change and it is more painful when you consider that the component already knew what data to update.\r\n\r\nOn the other hand, data changes always flowing in the same direction is what makes the Flux architecure so easy to reason about. If we let every component update the data independently, we are building a mess again.\r\n\r\nSo *Freezer*, instead of letting the child component update the data directly, gives every node the tools to make the change. The updates are always made by the root of the store and the data can keep flowing in just one direction.\r\n\r\nImagine that we have the following tree structure as our app state: ![Initial tree](img/initialTree.png)\r\n\r\nAnd we have a component responsible for handling the `state.c.f` ( the yellow node ) part of the data. Its scope is just that part of the tree, so the component receives it as a prop:\r\n```js\r\n// The component receives a part of the freezer data\r\nthis.props.branch = { h: 4, i: 5};\r\n```\r\nEventually the component is used to update `state.c.f.h = 8`. You can dispatch an action with the frozen node as the payload ( making it easier for your actions to know what to update ), or even use the node itself to make the change:\r\n```js\r\nthis.props.branch.set( {h: 8} );\r\n```\r\nThen, *Freezer* will create a new immutable data structure ( a new state for your app ) starting from the top of the tree, and our component will receive a new branch to render. The state ends up like this: ![Updated tree](img/updatedTree.png)\r\n\r\nSince the whole tree is updated, we can have the main app state in one single object and make the top level components re-render in a reactive way to changes that are made deep in the store hierarchy.\r\n\r\n**Freezer** is strongly influenced by the way that [Facebook's Immutable.js](https://github.com/facebook/immutable-js) handles immutabilty. It creates a new tree every time a modification is required, referencing the non modified nodes from the previous tree. Sharing node references among frozen objects saves memory and boosts the performance of creating new frozens.\r\n\r\nUsing immutability with React is great, because you don't need to make deep comparisons in order to know when to update a component:\r\n```js\r\nshouldComponentUpdate: function( nextProps ){\r\n\r\n    // The comparison is fast, and we won't render the component if\r\n    // it does not need it. This is a huge gain in performance.\r\n    return this.props.prop != nextProps.prop;\r\n}\r\n```\r\n\r\nInstead of learning the set of methods needed to use *Immutable*, *Freezer*'s API is much simpler; it uses common JS objects and arrays to store the data, so you can start using it right now. It also makes *Freezer* much more lightweight (Minified, Immutable is ~56KB and Freezer ~9KB).\r\n\r\n## API\r\n\r\nCreate a freezer object using the constructor:\r\n```js\r\nvar freezer = new Freezer({a: 'hola', b:[1,2, [3,4,5]], c: false });\r\n```\r\n\r\nA freezer object can accept options on initialization:\r\n```js\r\nvar freezer = new Freezer({hi: 'hello'}, {mutable: true, live:true});\r\n```\r\n| Name         | Type    | Default | Description |\r\n| ------------ | ------- | ------- | ----------- |\r\n| **mutable** | boolean | `false` | Once you get used to freezer, you can see that immutability is not necessary if you learn that you shouldn't update the data directly. In that case, disable immutability in the case that you need a small performance boost. |\r\n| **live** | boolean | `false` | With live mode on, freezer triggers the update events just when the changes happen, instead of batching all the changes and triggering the event on the next tick. This is useful if you want freezer to store input field values. |\r\n\r\nAnd then, Freezer's API is really simple and only has 2 methods: `get` and `set`. A freezer object also implements the [listener API](#listener-api).\r\n\r\n\r\n\r\n#### get()\r\n\r\nReturns a frozen object with the freezer data.\r\n```js\r\n// Logs: {a: 'hola', b:[1,2, [3,4,5]], c: false }\r\nconsole.log( freezer.get() ); \r\n```\r\nThe data returned is actually formed by arrays and objects, but they are sealed to prevent their mutation and they have some methods in them to update the store.\r\nEverytime an update is performed, `get` will return a new frozen object.\r\n\r\n#### set( data )\r\n\r\nReplace the current frozen data with new one.\r\n```js\r\n\r\n// An example on how to undo an update would be like this...\r\nvar freezer = new Freezer({a: 'hola', b:[1,2, [3,4,5]], c: false }),\r\n    state = freezer.get()\r\n;\r\n\r\nvar updated = state.set({c: true});\r\nconsole.log( updated.c ); // true\r\n\r\n// Restore the inital state\r\nfreezer.set( state );\r\nconsole.log( freezer.get().c ); // false\r\n```\r\n\r\n#### Events\r\n\r\nEvery time the data is updated, an `update` event is triggered on the freezer object. In order to use those events, *Freezer* implements the [listener API](#listener-api), and `on`, `once`, `off` and `trigger` methods are available on them.\r\n\r\n## Update methods\r\n\r\nFreezer data has three different types of nodes: *Hashes*, *Arrays* and *leaf nodes*. A leaf node can't be updated by itself and needs to be updated using its parent node. Every updating method returns a new immutable object with the new node result of the update:\r\n```js\r\nvar freezer = new Freezer({obj: {a:'hola', b:'adios'}, arr: [1,2]});\r\n\r\nvar updatedObj = freezer.get().obj.set('a', 'hello');\r\nconsole.log( updatedObj ); // {a:'hello', b:'adios'}\r\n\r\nvar updatedArr = freezer.get().arr.unshift( 0 );\r\nconsole.log( updatedArr ); // [0,1,2]\r\n\r\n// {obj: {a:'hello', b:'adios'}, arr: [0,1,2]}\r\nconsole.log( freezer.get() ); \r\n```\r\n\r\nBoth *Array* and *Hash* nodes have a `set` method to update or add elements to the node and a `reset` method to replace the node with other data.\r\n\r\n#### set( keyOrHash, value )\r\nArrays and hashes can update their children using the `set` method. It accepts a hash with the keys and values to update or two arguments: the key and the value.\r\n```js\r\nvar freezer = new Freezer({obj: {a:'hola', b:'adios'}, arr: [1,2]});\r\n\r\n// Updating using a hash\r\nfreezer.get().obj.set( {b:'bye', c:'ciao'} );\r\n\r\n// Updating using key and value\r\nfreezer.get().arr.set( 0, 0 );\r\n\r\n// {obj: {a:'hola', b:'bye', c:'ciao'}, arr: [0,2]}\r\nconsole.log( freezer.get() )\r\n```\r\n\r\n#### reset( newData )\r\nReset/replaces the node with new data. Listeners are preserved if the new data is an `array` or `object`, so it is possible to listen to reset calls. \r\n\r\n```js\r\nvar freezer = new Freezer({ foobar: {a: 'a', b: 'b', c: [0, 1, 2] } });\r\n\r\nvar newfoobar = { foo: 'bar', bar: 'foo' };\r\n\r\nvar reset = data.foobar.reset(newfoobar);\r\n\r\nconsole.log( reset ); //{ foo: 'bar', bar: 'foo' }\r\n```\r\n\r\n## Util methods\r\n#### toJS()\r\n*Freezer* nodes are immutable. `toJS` transforms *Freezer* nodes to plain mutable JS objects in case you need them.\r\n```js\r\n// Require node.js assert\r\nvar assert = require('assert');\r\n\r\nvar data = {obj: {a:'hola', b:'adios'}, arr: [1,2]},\r\n    freezer = new Freezer( data )\r\n;\r\n\r\nassert.deepEqual( data, freezer.get().toJS ); // Ok\r\n```\r\n\r\n#### pivot()\r\nWhen `pivot` is called in a node, all the changes requested in the descendant nodes will return the updated pivoted parent. The pivot will be removed on the next tick.\r\n```js\r\nvar freezer = new Freezer({\r\n    people: {\r\n        John: {age: 23},\r\n        Alice: {age: 40}\r\n    }\r\n});\r\n\r\n// If we don't pivot, the updated node is returned\r\nupdate = freezer.get().people.John.set({age: 18});\r\nconsole.log( update ); // {age: 18}\r\n\r\n// If we want to update two people at\r\n// a time we need to pivot\r\nvar update = freezer.get().people.pivot()\r\n    .John.set({age: 30})\r\n    .Alice.set({age: 30})\r\n;\r\nconsole.log( update ); \r\n// {people:{ John: {age: 30}, Alice: {age: 30} }\r\n```\r\n\r\nThe `pivot` method is really handy because when you have access to a node and update its children, it is the only way of getting the node updated to modify\r\nother children.\r\n\r\nThe pivot is removed on the next tick. This way it won't interfere with other parts of the app.\r\n\r\n#### now()\r\nUsing `now` in a node triggers the `update` method immediately.\r\n```js\r\nvar freezer = new Freezer({ test: 'hola' });\r\n\r\nfreezer.on('update', function( update ){\r\n    console.log('event');\r\n});\r\n\r\nfreezer.get().set({test: 'change'});\r\nconsole.log('changed'); \r\n// logs 'changed' and then 'event' on the next tick\r\n\r\nfreezer.get().set({test: 'adios'}).now();\r\nconsole.log('changed');\r\n// logs 'event' first and 'changed' after\r\n```\r\nUse it in cases that you need immediate updates. For example, if you are using React and you want to store an input value outside its component, you'll need to use `now` because the user can type more than one character before the update method is triggered, losing data.\r\n\r\nUsing Freezer's [`live` option](#api) is like using `now` on every update.\r\n\r\n## Hash methods\r\n#### remove( keyOrKeys )\r\nRemoves elements from a hash node. It accepts a string or an array with the names of the strings to remove.\r\n\r\n```js\r\nvar freezer = new Freezer({a:'hola', b:'adios', c:'hello', d:'bye'});\r\n\r\nvar updated = freezer.get()\r\n    .remove('d') // Removing an element\r\n    .remove(['b', 'c']) // Removing two elements\r\n;\r\n\r\nconsole.log( updated ); //{a: 'hola'}\r\n```\r\n\r\n\r\n## Array methods\r\nArray nodes have modified versions of the `push`, `pop`, `unshift`, `shift` and `splice` methods that update the cursor and return the new node, instead of updating the immutable array node ( that would be impossible ).\r\n```js\r\nvar freezer = new Freezer({ arr: [0,1,2,3,4] });\r\n\r\nfreezer.get().arr\r\n    .push( 5 ) // [0,1,2,3,4,5]\r\n    .pop() // [0,1,2,3,4]\r\n    .unshift( 'a' ) // ['a',0,1,2,3,4]\r\n    .shift() // [0,1,2,3,4]\r\n    .splice( 1, 1, 'a', 'b') // [ 0, 'a', 'b', 2, 3, 4]\r\n;\r\n```\r\n\r\nArray nodes also have the `append` and `prepend` methods to batch insert elements at the begining or the end of the array.\r\n```js\r\nvar freezer = new Freezer({ arr: [2] });\r\n\r\nfreezer.get().arr\r\n    .prepend([0,1]) // [0,1,2]\r\n    .append([3,4]) // [0,1,2,3,4]\r\n;\r\n```\r\n\r\n## Events\r\nFreezer objects emit `update` events whenever their data changes. It is also possible to listen to `update` events in an intermediate node by creating a listener on it using the `getListener` method.\r\n\r\n#### getListener()\r\nReturns a listener that emits an `update` event when the node is updated. The listener implements the [listener API](#listener-api).\r\n```js\r\nvar freezer = new Freezer({ arr: [2] }),\r\n    state = freezer.get(),\r\n    listener = state.arr.getListener()\r\n;\r\n\r\nlistener.on('update', function( newState ){\r\n    console.log( 'Updated!' );\r\n    console.log( newState );\r\n});\r\n\r\nstate.arr.push( 3 ); //logs 'Updated!' [2,3]\r\n```\r\n\r\n## Listener API\r\nFreezer instances and listeners implement an API influenced by the way Backbone handles events. The main event that Freezer emits is `update`, and it is emitted on every node update.\r\n\r\n#### on( eventName, callback )\r\nRegister a function to be called when an event occurs.\r\n#### once( eventName, callback )\r\nRegister a function to be called once when an event occurs. After being called the callback is unregistered.\r\n#### off( eventName, callback )\r\nCan unregister all callbacks from a listener if the `eventName` parameter is omitted, or all the callbacks for a `eventName` if the `callback` parameter is omitted.\r\n#### trigger( eventName [, param, param, ...] )\r\nTrigger an event on the listener. All the extra parameters will be passed to the registered callbacks.\r\n\r\n### Event hooks\r\nFreezer objects and nodes also emit `beforeAll` and `afterAll` events before and after any other event. Listeners bound to these events also receive the name of the triggered event in the arguments.\r\n```js\r\nvar Store = new Freezer({a: 1});\r\nStore.on('beforeAll', function( eventName, arg1, arg2 ){\r\n    console.log( event, arg1, arg2 );\r\n});\r\n\r\nStore.get().set({a: 2}); // Will log 'update', {a:2}, undefined\r\nStore.trigger('add', 4, 5); // Will log 'add', 4, 5\r\n```\r\nThis is a nice way of binding [reactions](#usage-with-react) to more than one type of event.\r\n\r\n## Batch updates\r\nAt some point you will find yourself wanting to apply multiple changes at a time. The full tree is re-generated on each change, but the only tree you probably need is the final result of all those changes. \r\n\r\nFreezer nodes offer a `transact` method to make local modifications to them without generating intermediate frozen trees, and a `run` method to commit all the changes at once. This way your app can have really good performance.\r\n\r\n```js\r\nvar freezer = new Freezer({list:[]}),\r\n    state = freezer.get()\r\n;\r\n\r\n// transact returns a mutable object\r\n// to make all the local changes\r\nvar trans = state.list.transact();\r\n\r\n// trans is a common array\r\nfor( var i = 0; i < 1000; i++ )\r\n    trans.push(i);\r\n\r\n// use it as a normal array\r\ntrans[0] = 1000; // [1000, 1, 2, ..., 999]\r\n\r\n// the store does not know about the yet\r\nfreezer.get().list.length == 0; // true\r\n\r\n// to commit the changes use the run method in the node\r\nstate.list.run();\r\n\r\n// all the changes are made at once\r\nfreezer.get().list; // [1000, 1, 2, ..., 999]\r\n```\r\n\r\nTransactions are designed to always commit the changes, so if you start a transaction but you forget to call `run`, it will be called automatically on the next tick.\r\n\r\nIt is possible to update the child nodes of a node that is making a transaction, but it is not really recommended. Those updates will not update the store until the transaction in the parent node is commited, and that may lead to confusion if you use child nodes as common freezer nodes. Updating child nodes doesn't improve the performance much because they have a transacting parent, so it is recommended to make the changes in the transaction node and run it as soon as you have finished with the modifications to prevent undesired behavior. \r\n\r\n## Usage with React\r\nCreating data-driven React applications using Freezer is really simple. Just wrap your top React component in order to pass the app state as a prop. Then, re-render on any state change.\r\n\r\n```js\r\nvar AppContainer = React.createClass({\r\n    render: function(){\r\n        var state = freezer.get();\r\n        return <App state={ state } />;\r\n    },\r\n    componentDidMount: function(){\r\n        var me = this;\r\n        freezer.on('update', function(){ me.forceUpdate() });\r\n    }\r\n});\r\n```\r\n\r\nFreezer can be used along with any Flux library, but it is also possible to use it in a Flux-like way without any framework.\r\n\r\nInstead of calling actions we can trigger custom events, thanks to the open event system built in Freezer. Those events accept any number of parameters.\r\n\r\n```js\r\n// State is the Freezer object\r\nState.trigger('products:addToCart', product, cart);\r\n```\r\n\r\nA dispatcher is not needed either, you can listen to those events directly in the Freezer object.\r\n\r\n```js\r\nState.on('products:addToCart', function (product, cart) {\r\n    // Update the app state here...\r\n});\r\n```\r\n\r\nListener methods that update the state are called **reactions**, ( we are building reactive applications, are't we? ). It is nice to organize them in files by their domain, as though they were flux stores, but with the difference that all the domains store the data in the same Freezer object.\r\n\r\nIf you need to coordinate state updates, you can trigger new events when a reaction finishes, or listen to specific nodes, without the need for `waitFor`.\r\n\r\nThis is all it takes to understand Flux apps with Freezer. No complex concepts like observers, reducers, payloads or action creators. Just events and almost no boilerplate code.\r\n\r\nYou can check this approach working in the [TodoMVC sample app](https://github.com/arqex/freezer-todomvc), or in the [flux comparison project](https://github.com/voronianski/flux-comparison).\r\n\r\n## Changelog\r\n[Here](https://github.com/arqex/freezer/blob/master/CHANGELOG.md)\r\n\r\n## License\r\n[MIT licensed](https://github.com/arqex/freezer/blob/master/LICENSE)\r\n",
  "readmeFilename": "README.md",
  "_id": "freezer-js@0.9.6",
  "_from": "freezer-js@^0.9.4"
}
